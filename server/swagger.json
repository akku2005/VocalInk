{
    "openapi": "3.0.0",
    "info": {
      "title": "VocalInk Blog Platform API",
      "version": "1.0.0",
      "description": "Comprehensive API documentation for VocalInk, a next-gen Medium-style blog platform with AI, gamification, and admin features.",
      "contact": {
        "name": "VocalInk API Support",
        "email": "support@vocalink.com"
      },
      "license": {
        "name": "MIT",
        "url": "https://opensource.org/licenses/MIT"
      }
    },
    "servers": [
      {
        "url": "http://localhost:5000/api",
        "description": "Development server"
      },
      {
        "url": "https://api.vocalink.com/api",
        "description": "Production server"
      }
    ],
    "security": [
      {
        "bearerAuth": []
      }
    ],
    "tags": [
      {
        "name": "Authentication",
        "description": "User authentication and authorization endpoints"
      },
      {
        "name": "Users",
        "description": "User profile management and social features"
      },
      {
        "name": "Blogs",
        "description": "Blog creation, management, and interaction"
      },
      {
        "name": "Comments",
        "description": "Comment system with inline comments and replies"
      },
      {
        "name": "Series",
        "description": "Blog series management and episodes"
      },
      {
        "name": "Badges",
        "description": "Gamification badge system"
      },
      {
        "name": "Notifications",
        "description": "User notification management"
      },
      {
        "name": "Abuse Reports",
        "description": "Content moderation and abuse reporting"
      },
      {
        "name": "XP System",
        "description": "Experience points and gamification"
      },
      {
        "name": "Admin",
        "description": "Administrative functions and moderation"
      }
    ],
    "paths": {
      "/auth/register": {
        "post": {
          "tags": ["Authentication"],
          "summary": "Register a new user",
          "description": "Create a new user account with email verification",
          "security": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterUser"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "User registered successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AuthResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Invalid input data",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error"
                  }
                }
              }
            },
            "409": {
              "description": "Email already exists",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error"
                  }
                }
              }
            }
          }
        }
      },
      "/auth/login": {
        "post": {
          "tags": ["Authentication"],
          "summary": "User login",
          "description": "Authenticate user and return JWT tokens",
          "security": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginUser"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Login successful",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AuthResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Invalid credentials",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error"
                  }
                }
              }
            }
          }
        }
      },
      "/auth/verify-email": {
        "post": {
          "tags": ["Authentication"],
          "summary": "Verify email address",
          "description": "Verify user email with verification code",
          "security": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifyEmail"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Email verified successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SuccessResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/auth/forgot-password": {
        "post": {
          "tags": ["Authentication"],
          "summary": "Request password reset",
          "description": "Send password reset email",
          "security": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForgotPassword"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Password reset email sent",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SuccessResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/auth/reset-password": {
        "post": {
          "tags": ["Authentication"],
          "summary": "Reset password",
          "description": "Reset password with token and code",
          "security": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResetPassword"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Password reset successful",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SuccessResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/auth/me": {
        "get": {
          "tags": ["Authentication"],
          "summary": "Get current user",
          "description": "Get authenticated user's profile",
          "responses": {
            "200": {
              "description": "User profile retrieved",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          }
        }
      },
      "/auth/logout": {
        "post": {
          "tags": ["Authentication"],
          "summary": "Logout user",
          "description": "Invalidate current session",
          "responses": {
            "200": {
              "description": "Logout successful",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SuccessResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/auth/refresh-token": {
        "post": {
          "tags": ["Authentication"],
          "summary": "Refresh access token",
          "description": "Get new access token using refresh token",
          "security": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "refreshToken": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Token refreshed successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AuthResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/auth/resend-verification": {
        "post": {
          "tags": ["Authentication"],
          "summary": "Resend verification code",
          "description": "Resend email verification code",
          "security": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "email": {
                      "type": "string",
                      "format": "email"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Verification code resent successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SuccessResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/auth/change-password": {
        "post": {
          "tags": ["Authentication"],
          "summary": "Change password",
          "description": "Change user password",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["currentPassword", "newPassword"],
                  "properties": {
                    "currentPassword": {
                      "type": "string"
                    },
                    "newPassword": {
                      "type": "string",
                      "minLength": 6
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Password changed successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SuccessResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/auth/logout-all": {
        "post": {
          "tags": ["Authentication"],
          "summary": "Logout from all devices",
          "description": "Invalidate all user sessions",
          "responses": {
            "200": {
              "description": "Logged out from all devices successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SuccessResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/auth/sessions": {
        "get": {
          "tags": ["Authentication"],
          "summary": "Get user sessions",
          "description": "Get all active sessions for current user",
          "responses": {
            "200": {
              "description": "User sessions retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "sessions": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "device": {
                              "type": "string"
                            },
                            "ip": {
                              "type": "string"
                            },
                            "lastActive": {
                              "type": "string",
                              "format": "date-time"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/auth/2fa/setup": {
        "post": {
          "tags": ["Authentication"],
          "summary": "Setup 2FA",
          "description": "Generate 2FA setup QR code and secret",
          "responses": {
            "200": {
              "description": "2FA setup generated successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "qrCode": {
                        "type": "string"
                      },
                      "secret": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/auth/2fa/verify": {
        "post": {
          "tags": ["Authentication"],
          "summary": "Verify 2FA setup",
          "description": "Verify 2FA setup with token",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["token"],
                  "properties": {
                    "token": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "2FA verified successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SuccessResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/auth/2fa/disable": {
        "post": {
          "tags": ["Authentication"],
          "summary": "Disable 2FA",
          "description": "Disable two-factor authentication",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["token"],
                  "properties": {
                    "token": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "2FA disabled successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SuccessResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/users/{id}": {
        "get": {
          "tags": ["Users"],
          "summary": "Get user profile",
          "description": "Get public user profile by ID",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "User ID"
            }
          ],
          "responses": {
            "200": {
              "description": "User profile retrieved",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          }
        },
        "put": {
          "tags": ["Users"],
          "summary": "Update user profile",
          "description": "Update user profile (owner only)",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateUser"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Profile updated successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          }
        }
      },
      "/users/{id}/follow": {
        "post": {
          "tags": ["Users"],
          "summary": "Follow user",
          "description": "Follow another user",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "User followed successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SuccessResponse"
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": ["Users"],
          "summary": "Unfollow user",
          "description": "Unfollow another user",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "User unfollowed successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SuccessResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/users/{id}/blogs": {
        "get": {
          "tags": ["Users"],
          "summary": "Get user blogs",
          "description": "Get all blogs by a specific user",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "page",
              "in": "query",
              "schema": {
                "type": "integer",
                "default": 1
              }
            },
            {
              "name": "limit",
              "in": "query",
              "schema": {
                "type": "integer",
                "default": 10
              }
            }
          ],
          "responses": {
            "200": {
              "description": "User blogs retrieved",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "blogs": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/Blog"
                        }
                      },
                      "pagination": {
                        "$ref": "#/components/schemas/Pagination"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/users/leaderboard": {
        "get": {
          "tags": ["Users"],
          "summary": "Get leaderboard",
          "description": "Get global user leaderboard",
          "parameters": [
            {
              "name": "type",
              "in": "query",
              "schema": {
                "type": "string",
                "enum": ["xp", "followers", "blogs", "likes"],
                "default": "xp"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "schema": {
                "type": "integer",
                "default": 50
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Leaderboard retrieved",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "leaderboard": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/LeaderboardEntry"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/users/me": {
        "patch": {
          "tags": ["Users"],
          "summary": "Update current user profile",
          "description": "Update current user's profile information",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateUser"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Profile updated successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          }
        }
      },
      "/users/{id}/badges": {
        "get": {
          "tags": ["Users"],
          "summary": "Get user badges",
          "description": "Get badges earned by a specific user",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "User badges retrieved",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "badges": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/Badge"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/users/{id}/notifications": {
        "get": {
          "tags": ["Users"],
          "summary": "Get user notifications",
          "description": "Get notifications for a specific user",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "page",
              "in": "query",
              "schema": {
                "type": "integer",
                "default": 1
              }
            },
            {
              "name": "limit",
              "in": "query",
              "schema": {
                "type": "integer",
                "default": 20
              }
            }
          ],
          "responses": {
            "200": {
              "description": "User notifications retrieved",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "notifications": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/Notification"
                        }
                      },
                      "pagination": {
                        "$ref": "#/components/schemas/Pagination"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/users/{id}/leaderboard": {
        "get": {
          "tags": ["Users"],
          "summary": "Get user leaderboard position",
          "description": "Get specific user's leaderboard position",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "User leaderboard position retrieved",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LeaderboardEntry"
                  }
                }
              }
            }
          }
        }
      },
      "/users/search": {
        "get": {
          "tags": ["Users"],
          "summary": "Search users",
          "description": "Search users by name or email",
          "parameters": [
            {
              "name": "q",
              "in": "query",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Search query"
            },
            {
              "name": "page",
              "in": "query",
              "schema": {
                "type": "integer",
                "default": 1
              }
            },
            {
              "name": "limit",
              "in": "query",
              "schema": {
                "type": "integer",
                "default": 10
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Users search results",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "users": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/User"
                        }
                      },
                      "pagination": {
                        "$ref": "#/components/schemas/Pagination"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/users/{id}/promote": {
        "patch": {
          "tags": ["Admin"],
          "summary": "Promote user to admin",
          "description": "Promote a user to admin role (admin only)",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "User promoted successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SuccessResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/users/{id}/upgrade": {
        "patch": {
          "tags": ["Users"],
          "summary": "Upgrade to writer",
          "description": "Upgrade user account to writer role",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Account upgraded successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SuccessResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/blogs": {
        "get": {
          "tags": ["Blogs"],
          "summary": "Get all blogs",
          "description": "Get paginated list of published blogs",
          "parameters": [
            {
              "name": "page",
              "in": "query",
              "schema": {
                "type": "integer",
                "default": 1
              }
            },
            {
              "name": "limit",
              "in": "query",
              "schema": {
                "type": "integer",
                "default": 10
              }
            },
            {
              "name": "category",
              "in": "query",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "tags",
              "in": "query",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "author",
              "in": "query",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Blogs retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "blogs": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/Blog"
                        }
                      },
                      "pagination": {
                        "$ref": "#/components/schemas/Pagination"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "post": {
          "tags": ["Blogs"],
          "summary": "Create new blog",
          "description": "Create a new blog post",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateBlog"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Blog created successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Blog"
                  }
                }
              }
            }
          }
        }
      },
      "/blogs/{id}": {
        "get": {
          "tags": ["Blogs"],
          "summary": "Get blog by ID",
          "description": "Get a specific blog post",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Blog retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Blog"
                  }
                }
              }
            }
          }
        },
        "put": {
          "tags": ["Blogs"],
          "summary": "Update blog",
          "description": "Update an existing blog post",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateBlog"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Blog updated successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Blog"
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": ["Blogs"],
          "summary": "Delete blog",
          "description": "Delete a blog post",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Blog deleted successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SuccessResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/blogs/{id}/like": {
        "post": {
          "tags": ["Blogs"],
          "summary": "Like blog",
          "description": "Like or unlike a blog post",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Blog liked/unliked successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SuccessResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/blogs/{id}/bookmark": {
        "post": {
          "tags": ["Blogs"],
          "summary": "Bookmark blog",
          "description": "Bookmark or unbookmark a blog post",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Blog bookmarked/unbookmarked successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SuccessResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/blogs/{id}/tts": {
        "post": {
          "tags": ["Blogs"],
          "summary": "Generate TTS",
          "description": "Generate text-to-speech audio for blog",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "TTS generated successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "ttsUrl": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/blogs/{id}/translate": {
        "post": {
          "tags": ["Blogs"],
          "summary": "Translate blog",
          "description": "Translate blog content to target language",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["targetLang"],
                  "properties": {
                    "targetLang": {
                      "type": "string",
                      "description": "Target language code (e.g., 'es', 'fr', 'de')"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Blog translated successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "translatedContent": {
                        "type": "string"
                      },
                      "targetLang": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/blogs/{id}/comments": {
        "get": {
          "tags": ["Blogs"],
          "summary": "Get blog comments",
          "description": "Get all comments for a specific blog",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "page",
              "in": "query",
              "schema": {
                "type": "integer",
                "default": 1
              }
            },
            {
              "name": "limit",
              "in": "query",
              "schema": {
                "type": "integer",
                "default": 20
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Blog comments retrieved",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "comments": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/Comment"
                        }
                      },
                      "pagination": {
                        "$ref": "#/components/schemas/Pagination"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "post": {
          "tags": ["Blogs"],
          "summary": "Add comment to blog",
          "description": "Add a new comment to a blog post",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateComment"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Comment added successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Comment"
                  }
                }
              }
            }
          }
        }
      },
      "/comments/blog/{id}": {
        "get": {
          "tags": ["Comments"],
          "summary": "Get blog comments",
          "description": "Get all comments for a specific blog",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "page",
              "in": "query",
              "schema": {
                "type": "integer",
                "default": 1
              }
            },
            {
              "name": "limit",
              "in": "query",
              "schema": {
                "type": "integer",
                "default": 20
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Comments retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "comments": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/Comment"
                        }
                      },
                      "pagination": {
                        "$ref": "#/components/schemas/Pagination"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "post": {
          "tags": ["Comments"],
          "summary": "Add comment to blog",
          "description": "Add a new comment to a blog post",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateComment"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Comment added successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Comment"
                  }
                }
              }
            }
          }
        }
      },
      "/comments/{id}": {
        "get": {
          "tags": ["Comments"],
          "summary": "Get comment by ID",
          "description": "Get a specific comment",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Comment retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Comment"
                  }
                }
              }
            }
          }
        },
        "put": {
          "tags": ["Comments"],
          "summary": "Update comment",
          "description": "Update an existing comment",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateComment"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Comment updated successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Comment"
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": ["Comments"],
          "summary": "Delete comment",
          "description": "Delete a comment",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Comment deleted successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SuccessResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/comments/{id}/reply": {
        "post": {
          "tags": ["Comments"],
          "summary": "Reply to comment",
          "description": "Add a reply to an existing comment",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateComment"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Reply added successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Comment"
                  }
                }
              }
            }
          }
        }
      },
      "/comments/{id}/report": {
        "post": {
          "tags": ["Comments"],
          "summary": "Report comment",
          "description": "Report an inappropriate comment",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportComment"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Comment reported successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SuccessResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/series": {
        "get": {
          "tags": ["Series"],
          "summary": "Get all series",
          "description": "Get paginated list of blog series",
          "parameters": [
            {
              "name": "page",
              "in": "query",
              "schema": {
                "type": "integer",
                "default": 1
              }
            },
            {
              "name": "limit",
              "in": "query",
              "schema": {
                "type": "integer",
                "default": 10
              }
            },
            {
              "name": "category",
              "in": "query",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "status",
              "in": "query",
              "schema": {
                "type": "string",
                "enum": ["draft", "active", "completed", "archived"]
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Series retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "series": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/Series"
                        }
                      },
                      "pagination": {
                        "$ref": "#/components/schemas/Pagination"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "post": {
          "tags": ["Series"],
          "summary": "Create new series",
          "description": "Create a new blog series",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateSeries"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Series created successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Series"
                  }
                }
              }
            }
          }
        }
      },
      "/series/{id}": {
        "get": {
          "tags": ["Series"],
          "summary": "Get series by ID",
          "description": "Get a specific blog series with episodes",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Series retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Series"
                  }
                }
              }
            }
          }
        },
        "put": {
          "tags": ["Series"],
          "summary": "Update series",
          "description": "Update an existing blog series",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateSeries"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Series updated successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Series"
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": ["Series"],
          "summary": "Delete series",
          "description": "Delete a blog series",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Series deleted successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SuccessResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/series/{id}/episodes": {
        "post": {
          "tags": ["Series"],
          "summary": "Add episode to series",
          "description": "Add a new episode to a blog series",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateEpisode"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Episode added successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Episode"
                  }
                }
              }
            }
          }
        }
      },
      "/series/trending": {
        "get": {
          "tags": ["Series"],
          "summary": "Get trending series",
          "description": "Get trending blog series",
          "parameters": [
            {
              "name": "limit",
              "in": "query",
              "schema": {
                "type": "integer",
                "default": 10
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Trending series retrieved",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "series": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/Series"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/series/recommendations": {
        "get": {
          "tags": ["Series"],
          "summary": "Get series recommendations",
          "description": "Get personalized series recommendations",
          "parameters": [
            {
              "name": "limit",
              "in": "query",
              "schema": {
                "type": "integer",
                "default": 10
              }
            },
            {
              "name": "category",
              "in": "query",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Series recommendations retrieved",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "series": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/Series"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/series/{id}/episodes/{episodeId}": {
        "put": {
          "tags": ["Series"],
          "summary": "Update episode",
          "description": "Update an episode in a series",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "episodeId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateEpisode"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Episode updated successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Episode"
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": ["Series"],
          "summary": "Remove episode",
          "description": "Remove an episode from a series",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "episodeId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Episode removed successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SuccessResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/series/{id}/collaborators": {
        "post": {
          "tags": ["Series"],
          "summary": "Add collaborator",
          "description": "Add a collaborator to a series",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["userId", "role"],
                  "properties": {
                    "userId": {
                      "type": "string"
                    },
                    "role": {
                      "type": "string",
                      "enum": ["creator", "editor", "contributor", "reviewer"]
                    },
                    "permissions": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": ["read", "write", "publish", "manage", "delete"]
                      }
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Collaborator added successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SuccessResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/series/{id}/collaborators/{userId}": {
        "delete": {
          "tags": ["Series"],
          "summary": "Remove collaborator",
          "description": "Remove a collaborator from a series",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Collaborator removed successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SuccessResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/series/{id}/progress": {
        "post": {
          "tags": ["Series"],
          "summary": "Update progress",
          "description": "Update user progress in a series",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["episodeId", "status"],
                  "properties": {
                    "episodeId": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string",
                      "enum": ["not_started", "in_progress", "completed"]
                    },
                    "progress": {
                      "type": "number",
                      "minimum": 0,
                      "maximum": 100
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Progress updated successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SuccessResponse"
                  }
                }
              }
            }
          }
        },
        "get": {
          "tags": ["Series"],
          "summary": "Get user progress",
          "description": "Get current user's progress in a series",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "User progress retrieved",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "progress": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "episodeId": {
                              "type": "string"
                            },
                            "status": {
                              "type": "string"
                            },
                            "progress": {
                              "type": "number"
                            },
                            "completedAt": {
                              "type": "string",
                              "format": "date-time"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/series/{id}/progress/{userId}": {
        "get": {
          "tags": ["Series"],
          "summary": "Get user progress by ID",
          "description": "Get specific user's progress in a series",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "User progress retrieved",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "progress": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "episodeId": {
                              "type": "string"
                            },
                            "status": {
                              "type": "string"
                            },
                            "progress": {
                              "type": "number"
                            },
                            "completedAt": {
                              "type": "string",
                              "format": "date-time"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/series/{id}/bookmarks": {
        "post": {
          "tags": ["Series"],
          "summary": "Add bookmark",
          "description": "Bookmark an episode in a series",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["episodeId"],
                  "properties": {
                    "episodeId": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Bookmark added successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SuccessResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/series/{id}/bookmarks/{episodeId}": {
        "delete": {
          "tags": ["Series"],
          "summary": "Remove bookmark",
          "description": "Remove bookmark from an episode",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "episodeId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Bookmark removed successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SuccessResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/series/{id}/analytics": {
        "get": {
          "tags": ["Series"],
          "summary": "Get series analytics",
          "description": "Get analytics data for a series",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "period",
              "in": "query",
              "schema": {
                "type": "string",
                "enum": ["7d", "30d", "90d", "1y"],
                "default": "30d"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Series analytics retrieved",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "views": {
                        "type": "number"
                      },
                      "completions": {
                        "type": "number"
                      },
                      "avgProgress": {
                        "type": "number"
                      },
                      "topEpisodes": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "episodeId": {
                              "type": "string"
                            },
                            "views": {
                              "type": "number"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/badges": {
        "get": {
          "tags": ["Badges"],
          "summary": "Get all badges",
          "description": "Get paginated list of available badges",
          "parameters": [
            {
              "name": "page",
              "in": "query",
              "schema": {
                "type": "integer",
                "default": 1
              }
            },
            {
              "name": "limit",
              "in": "query",
              "schema": {
                "type": "integer",
                "default": 20
              }
            },
            {
              "name": "category",
              "in": "query",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "rarity",
              "in": "query",
              "schema": {
                "type": "string",
                "enum": ["common", "uncommon", "rare", "epic", "legendary", "mythic"]
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Badges retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "badges": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/Badge"
                        }
                      },
                      "pagination": {
                        "$ref": "#/components/schemas/Pagination"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/badges/{id}": {
        "get": {
          "tags": ["Badges"],
          "summary": "Get badge by ID",
          "description": "Get a specific badge details",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Badge retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Badge"
                  }
                }
              }
            }
          }
        }
      },
      "/badges/{badgeId}/claim": {
        "post": {
          "tags": ["Badges"],
          "summary": "Claim badge",
          "description": "Claim a badge if eligible",
          "parameters": [
            {
              "name": "badgeId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Badge claimed successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BadgeClaim"
                  }
                }
              }
            }
          }
        }
      },
      "/badges/user/badges": {
        "get": {
          "tags": ["Badges"],
          "summary": "Get user badges",
          "description": "Get badges earned by current user",
          "parameters": [
            {
              "name": "page",
              "in": "query",
              "schema": {
                "type": "integer",
                "default": 1
              }
            },
            {
              "name": "limit",
              "in": "query",
              "schema": {
                "type": "integer",
                "default": 20
              }
            }
          ],
          "responses": {
            "200": {
              "description": "User badges retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "badges": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/BadgeClaim"
                        }
                      },
                      "pagination": {
                        "$ref": "#/components/schemas/Pagination"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/badges/search": {
        "get": {
          "tags": ["Badges"],
          "summary": "Search badges",
          "description": "Search badges by name or description",
          "parameters": [
            {
              "name": "q",
              "in": "query",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Search query"
            },
            {
              "name": "page",
              "in": "query",
              "schema": {
                "type": "integer",
                "default": 1
              }
            },
            {
              "name": "limit",
              "in": "query",
              "schema": {
                "type": "integer",
                "default": 20
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Badge search results",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "badges": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/Badge"
                        }
                      },
                      "pagination": {
                        "$ref": "#/components/schemas/Pagination"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/badges/popular": {
        "get": {
          "tags": ["Badges"],
          "summary": "Get popular badges",
          "description": "Get most popular badges",
          "parameters": [
            {
              "name": "limit",
              "in": "query",
              "schema": {
                "type": "integer",
                "default": 10
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Popular badges retrieved",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "badges": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/Badge"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/badges/rare": {
        "get": {
          "tags": ["Badges"],
          "summary": "Get rare badges",
          "description": "Get rare and legendary badges",
          "parameters": [
            {
              "name": "limit",
              "in": "query",
              "schema": {
                "type": "integer",
                "default": 10
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Rare badges retrieved",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "badges": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/Badge"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/badges/stats": {
        "get": {
          "tags": ["Badges"],
          "summary": "Get badge statistics",
          "description": "Get overall badge statistics",
          "responses": {
            "200": {
              "description": "Badge statistics retrieved",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "totalBadges": {
                        "type": "integer"
                      },
                      "totalClaims": {
                        "type": "integer"
                      },
                      "rarityDistribution": {
                        "type": "object",
                        "properties": {
                          "common": {
                            "type": "integer"
                          },
                          "uncommon": {
                            "type": "integer"
                          },
                          "rare": {
                            "type": "integer"
                          },
                          "epic": {
                            "type": "integer"
                          },
                          "legendary": {
                            "type": "integer"
                          },
                          "mythic": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/badges/analytics": {
        "get": {
          "tags": ["Admin"],
          "summary": "Get badge analytics",
          "description": "Get detailed badge analytics (admin only)",
          "responses": {
            "200": {
              "description": "Badge analytics retrieved",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "claimRate": {
                        "type": "number"
                      },
                      "popularBadges": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "badgeId": {
                              "type": "string"
                            },
                            "claims": {
                              "type": "integer"
                            }
                          }
                        }
                      },
                      "userEngagement": {
                        "type": "object",
                        "properties": {
                          "avgBadgesPerUser": {
                            "type": "number"
                          },
                          "activeCollectors": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/badges/category/{category}": {
        "get": {
          "tags": ["Badges"],
          "summary": "Get badges by category",
          "description": "Get badges filtered by category",
          "parameters": [
            {
              "name": "category",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "page",
              "in": "query",
              "schema": {
                "type": "integer",
                "default": 1
              }
            },
            {
              "name": "limit",
              "in": "query",
              "schema": {
                "type": "integer",
                "default": 20
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Category badges retrieved",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "badges": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/Badge"
                        }
                      },
                      "pagination": {
                        "$ref": "#/components/schemas/Pagination"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/badges/user/badges/{userId}": {
        "get": {
          "tags": ["Badges"],
          "summary": "Get user badges by ID",
          "description": "Get badges earned by a specific user",
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "page",
              "in": "query",
              "schema": {
                "type": "integer",
                "default": 1
              }
            },
            {
              "name": "limit",
              "in": "query",
              "schema": {
                "type": "integer",
                "default": 20
              }
            }
          ],
          "responses": {
            "200": {
              "description": "User badges retrieved",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "badges": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/BadgeClaim"
                        }
                      },
                      "pagination": {
                        "$ref": "#/components/schemas/Pagination"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/badges/user/eligible": {
        "get": {
          "tags": ["Badges"],
          "summary": "Get eligible badges",
          "description": "Get badges that user is eligible to claim",
          "responses": {
            "200": {
              "description": "Eligible badges retrieved",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "badges": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/Badge"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/badges/user/claims": {
        "get": {
          "tags": ["Badges"],
          "summary": "Get user claim history",
          "description": "Get current user's badge claim history",
          "parameters": [
            {
              "name": "page",
              "in": "query",
              "schema": {
                "type": "integer",
                "default": 1
              }
            },
            {
              "name": "limit",
              "in": "query",
              "schema": {
                "type": "integer",
                "default": 20
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Claim history retrieved",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "claims": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/BadgeClaim"
                        }
                      },
                      "pagination": {
                        "$ref": "#/components/schemas/Pagination"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/badges/user/claims/{userId}": {
        "get": {
          "tags": ["Badges"],
          "summary": "Get user claim history by ID",
          "description": "Get badge claim history for a specific user",
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "page",
              "in": "query",
              "schema": {
                "type": "integer",
                "default": 1
              }
            },
            {
              "name": "limit",
              "in": "query",
              "schema": {
                "type": "integer",
                "default": 20
              }
            }
          ],
          "responses": {
            "200": {
              "description": "User claim history retrieved",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "claims": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/BadgeClaim"
                        }
                      },
                      "pagination": {
                        "$ref": "#/components/schemas/Pagination"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/badges/admin/claims/pending": {
        "get": {
          "tags": ["Admin"],
          "summary": "Get pending claims",
          "description": "Get pending badge claims for review (admin only)",
          "parameters": [
            {
              "name": "page",
              "in": "query",
              "schema": {
                "type": "integer",
                "default": 1
              }
            },
            {
              "name": "limit",
              "in": "query",
              "schema": {
                "type": "integer",
                "default": 20
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Pending claims retrieved",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "claims": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/BadgeClaim"
                        }
                      },
                      "pagination": {
                        "$ref": "#/components/schemas/Pagination"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/badges/admin/claims/{claimId}/review": {
        "put": {
          "tags": ["Admin"],
          "summary": "Review claim",
          "description": "Review and approve/reject a badge claim (admin only)",
          "parameters": [
            {
              "name": "claimId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["status"],
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": ["approved", "rejected"]
                    },
                    "notes": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Claim reviewed successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SuccessResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/notifications": {
        "get": {
          "tags": ["Notifications"],
          "summary": "Get user notifications",
          "description": "Get notifications for current user",
          "parameters": [
            {
              "name": "page",
              "in": "query",
              "schema": {
                "type": "integer",
                "default": 1
              }
            },
            {
              "name": "limit",
              "in": "query",
              "schema": {
                "type": "integer",
                "default": 20
              }
            },
            {
              "name": "unread",
              "in": "query",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Notifications retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "notifications": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/Notification"
                        }
                      },
                      "pagination": {
                        "$ref": "#/components/schemas/Pagination"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/notifications/{id}/read": {
        "patch": {
          "tags": ["Notifications"],
          "summary": "Mark notification as read",
          "description": "Mark a notification as read",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Notification marked as read",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SuccessResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/notifications/read-all": {
        "patch": {
          "tags": ["Notifications"],
          "summary": "Mark all notifications as read",
          "description": "Mark all user notifications as read",
          "responses": {
            "200": {
              "description": "All notifications marked as read",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SuccessResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/notifications/stats": {
        "get": {
          "tags": ["Notifications"],
          "summary": "Get notification stats",
          "description": "Get notification statistics for current user",
          "responses": {
            "200": {
              "description": "Notification stats retrieved",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "total": {
                        "type": "integer"
                      },
                      "unread": {
                        "type": "integer"
                      },
                      "read": {
                        "type": "integer"
                      },
                      "byType": {
                        "type": "object",
                        "properties": {
                          "like": {
                            "type": "integer"
                          },
                          "comment": {
                            "type": "integer"
                          },
                          "follow": {
                            "type": "integer"
                          },
                          "badge": {
                            "type": "integer"
                          },
                          "system": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/notifications/{id}": {
        "get": {
          "tags": ["Notifications"],
          "summary": "Get notification by ID",
          "description": "Get a specific notification by ID",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Notification retrieved",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Notification"
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": ["Notifications"],
          "summary": "Delete notification",
          "description": "Delete a specific notification",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Notification deleted successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SuccessResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/notifications/{id}/unread": {
        "patch": {
          "tags": ["Notifications"],
          "summary": "Mark notification as unread",
          "description": "Mark a notification as unread",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Notification marked as unread",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SuccessResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/notifications/preferences": {
        "get": {
          "tags": ["Notifications"],
          "summary": "Get notification preferences",
          "description": "Get current user's notification preferences",
          "responses": {
            "200": {
              "description": "Notification preferences retrieved",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "email": {
                        "type": "boolean"
                      },
                      "push": {
                        "type": "boolean"
                      },
                      "types": {
                        "type": "object",
                        "properties": {
                          "like": {
                            "type": "boolean"
                          },
                          "comment": {
                            "type": "boolean"
                          },
                          "follow": {
                            "type": "boolean"
                          },
                          "badge": {
                            "type": "boolean"
                          },
                          "system": {
                            "type": "boolean"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "put": {
          "tags": ["Notifications"],
          "summary": "Update notification preferences",
          "description": "Update current user's notification preferences",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "email": {
                      "type": "boolean"
                    },
                    "push": {
                      "type": "boolean"
                    },
                    "types": {
                      "type": "object",
                      "properties": {
                        "like": {
                          "type": "boolean"
                        },
                        "comment": {
                          "type": "boolean"
                        },
                        "follow": {
                          "type": "boolean"
                        },
                        "badge": {
                          "type": "boolean"
                        },
                        "system": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Notification preferences updated",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SuccessResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/notifications/system": {
        "post": {
          "tags": ["Admin"],
          "summary": "Create system notification",
          "description": "Create a system-wide notification (admin only)",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["title", "message"],
                  "properties": {
                    "title": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string",
                      "enum": ["info", "warning", "success", "error"]
                    },
                    "targetUsers": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "System notification created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SuccessResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/abusereports": {
        "post": {
          "tags": ["Abuse Reports"],
          "summary": "Create abuse report",
          "description": "Report inappropriate content or behavior",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateAbuseReport"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Abuse report created successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AbuseReport"
                  }
                }
              }
            }
          }
        },
        "get": {
          "tags": ["Admin"],
          "summary": "Get all reports",
          "description": "Get all abuse reports (admin/moderator only)",
          "parameters": [
            {
              "name": "page",
              "in": "query",
              "schema": {
                "type": "integer",
                "default": 1
              }
            },
            {
              "name": "limit",
              "in": "query",
              "schema": {
                "type": "integer",
                "default": 20
              }
            },
            {
              "name": "status",
              "in": "query",
              "schema": {
                "type": "string",
                "enum": ["pending", "under_review", "resolved", "dismissed"]
              }
            },
            {
              "name": "priority",
              "in": "query",
              "schema": {
                "type": "string",
                "enum": ["low", "medium", "high", "urgent"]
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Reports retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "reports": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/AbuseReport"
                        }
                      },
                      "pagination": {
                        "$ref": "#/components/schemas/Pagination"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/abusereports/categories": {
        "get": {
          "tags": ["Abuse Reports"],
          "summary": "Get report categories",
          "description": "Get available abuse report categories",
          "responses": {
            "200": {
              "description": "Categories retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/abusereports/my-reports": {
        "get": {
          "tags": ["Abuse Reports"],
          "summary": "Get user reports",
          "description": "Get abuse reports created by current user",
          "parameters": [
            {
              "name": "page",
              "in": "query",
              "schema": {
                "type": "integer",
                "default": 1
              }
            },
            {
              "name": "limit",
              "in": "query",
              "schema": {
                "type": "integer",
                "default": 20
              }
            }
          ],
          "responses": {
            "200": {
              "description": "User reports retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "reports": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/AbuseReport"
                        }
                      },
                      "pagination": {
                        "$ref": "#/components/schemas/Pagination"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/abusereports/my-reports/{reportId}": {
        "get": {
          "tags": ["Abuse Reports"],
          "summary": "Get report by ID",
          "description": "Get a specific abuse report by ID",
          "parameters": [
            {
              "name": "reportId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Report retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AbuseReport"
                  }
                }
              }
            }
          }
        }
      },
      "/abusereports/my-reports/{reportId}/appeal": {
        "post": {
          "tags": ["Abuse Reports"],
          "summary": "Appeal report",
          "description": "Appeal a resolved abuse report",
          "parameters": [
            {
              "name": "reportId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["reason"],
                  "properties": {
                    "reason": {
                      "type": "string",
                      "minLength": 10,
                      "maxLength": 1000
                    },
                    "evidence": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Appeal submitted successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SuccessResponse"
                  }
                }
              }
            }
          }
        }
      },

      "/abusereports/urgent": {
        "get": {
          "tags": ["Admin"],
          "summary": "Get urgent reports",
          "description": "Get urgent priority abuse reports (admin/moderator only)",
          "parameters": [
            {
              "name": "page",
              "in": "query",
              "schema": {
                "type": "integer",
                "default": 1
              }
            },
            {
              "name": "limit",
              "in": "query",
              "schema": {
                "type": "integer",
                "default": 20
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Urgent reports retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "reports": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/AbuseReport"
                        }
                      },
                      "pagination": {
                        "$ref": "#/components/schemas/Pagination"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/abusereports/analytics": {
        "get": {
          "tags": ["Admin"],
          "summary": "Get report analytics",
          "description": "Get abuse report analytics (admin only)",
          "parameters": [
            {
              "name": "period",
              "in": "query",
              "schema": {
                "type": "string",
                "enum": ["7d", "30d", "90d", "1y"],
                "default": "30d"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Report analytics retrieved",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "totalReports": {
                        "type": "integer"
                      },
                      "resolvedReports": {
                        "type": "integer"
                      },
                      "avgResolutionTime": {
                        "type": "number"
                      },
                      "byCategory": {
                        "type": "object"
                      },
                      "byPriority": {
                        "type": "object"
                      },
                      "trends": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "date": {
                              "type": "string",
                              "format": "date"
                            },
                            "count": {
                              "type": "integer"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/abusereports/target/{targetType}/{targetId}": {
        "get": {
          "tags": ["Admin"],
          "summary": "Get reports by target",
          "description": "Get all reports for a specific target (admin/moderator only)",
          "parameters": [
            {
              "name": "targetType",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "enum": ["blog", "comment", "user", "series"]
              }
            },
            {
              "name": "targetId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "page",
              "in": "query",
              "schema": {
                "type": "integer",
                "default": 1
              }
            },
            {
              "name": "limit",
              "in": "query",
              "schema": {
                "type": "integer",
                "default": 20
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Target reports retrieved",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "reports": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/AbuseReport"
                        }
                      },
                      "pagination": {
                        "$ref": "#/components/schemas/Pagination"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/abusereports/{reportId}": {
        "get": {
          "tags": ["Admin"],
          "summary": "Get report by ID (admin)",
          "description": "Get a specific abuse report by ID (admin/moderator only)",
          "parameters": [
            {
              "name": "reportId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Report retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AbuseReport"
                  }
                }
              }
            }
          }
        }
      },
      "/abusereports/{reportId}/status": {
        "put": {
          "tags": ["Admin"],
          "summary": "Update report status",
          "description": "Update abuse report status (admin/moderator only)",
          "parameters": [
            {
              "name": "reportId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["status"],
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": ["pending", "under_review", "resolved", "dismissed"]
                    },
                    "notes": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Report status updated successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SuccessResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/abusereports/{reportId}/resolve": {
        "put": {
          "tags": ["Admin"],
          "summary": "Resolve report",
          "description": "Resolve an abuse report with action (admin/moderator only)",
          "parameters": [
            {
              "name": "reportId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["action"],
                  "properties": {
                    "action": {
                      "type": "string",
                      "enum": ["warn", "suspend", "ban", "remove_content", "no_action"]
                    },
                    "duration": {
                      "type": "integer",
                      "description": "Duration in days for suspension/ban"
                    },
                    "reason": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Report resolved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SuccessResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/xp/user": {
        "get": {
          "tags": ["XP System"],
          "summary": "Get user XP",
          "description": "Get current user's XP and level information",
          "responses": {
            "200": {
              "description": "User XP retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UserXP"
                  }
                }
              }
            }
          }
        }
      },
      "/xp/history": {
        "get": {
          "tags": ["XP System"],
          "summary": "Get XP history",
          "description": "Get user's XP transaction history",
          "parameters": [
            {
              "name": "page",
              "in": "query",
              "schema": {
                "type": "integer",
                "default": 1
              }
            },
            {
              "name": "limit",
              "in": "query",
              "schema": {
                "type": "integer",
                "default": 20
              }
            }
          ],
          "responses": {
            "200": {
              "description": "XP history retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "transactions": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/XPTransaction"
                        }
                      },
                      "pagination": {
                        "$ref": "#/components/schemas/Pagination"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/xp/leaderboard": {
        "get": {
          "tags": ["XP System"],
          "summary": "Get XP leaderboard",
          "description": "Get global XP leaderboard",
          "parameters": [
            {
              "name": "limit",
              "in": "query",
              "schema": {
                "type": "integer",
                "default": 50
              }
            }
          ],
          "responses": {
            "200": {
              "description": "XP leaderboard retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "leaderboard": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/LeaderboardEntry"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/xp/stats": {
        "get": {
          "tags": ["XP System"],
          "summary": "Get user XP stats",
          "description": "Get detailed XP statistics for current user",
          "responses": {
            "200": {
              "description": "XP stats retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "totalXP": {
                        "type": "integer"
                      },
                      "currentLevel": {
                        "type": "integer"
                      },
                      "xpToNextLevel": {
                        "type": "integer"
                      },
                      "levelProgress": {
                        "type": "number"
                      },
                      "rank": {
                        "type": "integer"
                      },
                      "weeklyXP": {
                        "type": "integer"
                      },
                      "monthlyXP": {
                        "type": "integer"
                      },
                      "topSources": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "source": {
                              "type": "string"
                            },
                            "xp": {
                              "type": "integer"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/xp/rank": {
        "get": {
          "tags": ["XP System"],
          "summary": "Get user rank",
          "description": "Get current user's global rank",
          "responses": {
            "200": {
              "description": "User rank retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "rank": {
                        "type": "integer"
                      },
                      "totalUsers": {
                        "type": "integer"
                      },
                      "percentile": {
                        "type": "number"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/xp/settings": {
        "put": {
          "tags": ["XP System"],
          "summary": "Update gamification settings",
          "description": "Update user's gamification preferences",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "showXP": {
                      "type": "boolean"
                    },
                    "showLevel": {
                      "type": "boolean"
                    },
                    "showBadges": {
                      "type": "boolean"
                    },
                    "showLeaderboard": {
                      "type": "boolean"
                    },
                    "notifications": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Settings updated successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SuccessResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/xp/config": {
        "get": {
          "tags": ["XP System"],
          "summary": "Get XP configuration",
          "description": "Get XP system configuration and rules",
          "responses": {
            "200": {
              "description": "XP configuration retrieved",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "levelFormula": {
                        "type": "string"
                      },
                      "xpSources": {
                        "type": "object",
                        "properties": {
                          "blog_creation": {
                            "type": "integer"
                          },
                          "blog_publishing": {
                            "type": "integer"
                          },
                          "comment": {
                            "type": "integer"
                          },
                          "like": {
                            "type": "integer"
                          },
                          "follow": {
                            "type": "integer"
                          },
                          "badge": {
                            "type": "integer"
                          }
                        }
                      },
                      "levelRewards": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "level": {
                              "type": "integer"
                            },
                            "rewards": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/xp/award": {
        "post": {
          "tags": ["XP System"],
          "summary": "Award XP",
          "description": "Award XP to a user (internal use)",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["userId", "amount", "reason"],
                  "properties": {
                    "userId": {
                      "type": "string"
                    },
                    "amount": {
                      "type": "integer"
                    },
                    "reason": {
                      "type": "string"
                    },
                    "source": {
                      "type": "string",
                      "enum": ["blog_creation", "blog_publishing", "comment", "like", "follow", "badge", "admin"]
                    },
                    "sourceId": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "XP awarded successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SuccessResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/xp/flagged-transactions": {
        "get": {
          "tags": ["Admin"],
          "summary": "Get flagged transactions",
          "description": "Get flagged XP transactions for review (admin only)",
          "parameters": [
            {
              "name": "page",
              "in": "query",
              "schema": {
                "type": "integer",
                "default": 1
              }
            },
            {
              "name": "limit",
              "in": "query",
              "schema": {
                "type": "integer",
                "default": 20
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Flagged transactions retrieved",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "transactions": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/XPTransaction"
                        }
                      },
                      "pagination": {
                        "$ref": "#/components/schemas/Pagination"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/xp/flagged-transactions/{transactionId}/resolve": {
        "put": {
          "tags": ["Admin"],
          "summary": "Resolve flagged transaction",
          "description": "Resolve a flagged XP transaction (admin only)",
          "parameters": [
            {
              "name": "transactionId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["action"],
                  "properties": {
                    "action": {
                      "type": "string",
                      "enum": ["approve", "reject", "modify"]
                    },
                    "notes": {
                      "type": "string"
                    },
                    "newAmount": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Transaction resolved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SuccessResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/xp/admin/grant": {
        "post": {
          "tags": ["Admin"],
          "summary": "Admin grant XP",
          "description": "Grant XP to a user (admin only)",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["userId", "amount", "reason"],
                  "properties": {
                    "userId": {
                      "type": "string"
                    },
                    "amount": {
                      "type": "integer"
                    },
                    "reason": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "XP granted successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SuccessResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/xp/admin/deduct": {
        "post": {
          "tags": ["Admin"],
          "summary": "Admin deduct XP",
          "description": "Deduct XP from a user (admin only)",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["userId", "amount", "reason"],
                  "properties": {
                    "userId": {
                      "type": "string"
                    },
                    "amount": {
                      "type": "integer"
                    },
                    "reason": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "XP deducted successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SuccessResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "components": {
      "securitySchemes": {
        "bearerAuth": {
          "type": "http",
          "scheme": "bearer",
          "bearerFormat": "JWT"
        }
      },
      "schemas": {
        "RegisterUser": {
          "type": "object",
          "required": ["name", "email", "password"],
          "properties": {
            "name": {
              "type": "string",
              "minLength": 2,
              "maxLength": 50,
              "description": "User's full name"
            },
            "email": {
              "type": "string",
              "format": "email",
              "description": "User's email address"
            },
            "password": {
              "type": "string",
              "minLength": 6,
              "description": "User's password"
            },
            "role": {
              "type": "string",
              "enum": ["reader", "writer", "admin"],
              "default": "reader",
              "description": "User's role"
            }
          }
        },
        "LoginUser": {
          "type": "object",
          "required": ["email", "password"],
          "properties": {
            "email": {
              "type": "string",
              "format": "email",
              "description": "User's email address"
            },
            "password": {
              "type": "string",
              "description": "User's password"
            }
          }
        },
        "VerifyEmail": {
          "type": "object",
          "required": ["email", "code"],
          "properties": {
            "email": {
              "type": "string",
              "format": "email",
              "description": "User's email address"
            },
            "code": {
              "type": "string",
              "description": "Email verification code"
            }
          }
        },
        "ForgotPassword": {
          "type": "object",
          "required": ["email"],
          "properties": {
            "email": {
              "type": "string",
              "format": "email",
              "description": "User's email address"
            }
          }
        },
        "ResetPassword": {
          "type": "object",
          "required": ["token", "code", "newPassword"],
          "properties": {
            "token": {
              "type": "string",
              "description": "Password reset token"
            },
            "code": {
              "type": "string",
              "description": "Password reset code"
            },
            "newPassword": {
              "type": "string",
              "minLength": 6,
              "description": "New password"
            }
          }
        },
        "User": {
          "type": "object",
          "properties": {
            "_id": {
              "type": "string",
              "description": "User ID"
            },
            "name": {
              "type": "string",
              "description": "User's full name"
            },
            "email": {
              "type": "string",
              "format": "email",
              "description": "User's email address"
            },
            "role": {
              "type": "string",
              "enum": ["reader", "writer", "admin"],
              "description": "User's role"
            },
            "bio": {
              "type": "string",
              "description": "User's biography"
            },
            "profilePicture": {
              "type": "string",
              "description": "Profile picture URL"
            },
            "xp": {
              "type": "integer",
              "description": "Experience points"
            },
            "level": {
              "type": "integer",
              "description": "User level"
            },
            "isVerified": {
              "type": "boolean",
              "description": "Email verification status"
            },
            "followers": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "List of follower IDs"
            },
            "following": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "List of following IDs"
            },
            "badges": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "List of badge IDs"
            },
            "createdAt": {
              "type": "string",
              "format": "date-time",
              "description": "Account creation date"
            },
            "updatedAt": {
              "type": "string",
              "format": "date-time",
              "description": "Last update date"
            }
          }
        },
        "UpdateUser": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "minLength": 2,
              "maxLength": 50,
              "description": "User's full name"
            },
            "bio": {
              "type": "string",
              "maxLength": 500,
              "description": "User's biography"
            },
            "profilePicture": {
              "type": "string",
              "description": "Profile picture URL"
            },
            "socialLinks": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "platform": {
                    "type": "string",
                    "enum": ["twitter", "github", "linkedin", "instagram", "facebook", "youtube", "website"]
                  },
                  "url": {
                    "type": "string",
                    "format": "uri"
                  }
                }
              }
            }
          }
        },
        "Blog": {
          "type": "object",
          "properties": {
            "_id": {
              "type": "string",
              "description": "Blog ID"
            },
            "title": {
              "type": "string",
              "description": "Blog title"
            },
            "content": {
              "type": "string",
              "description": "Blog content"
            },
            "summary": {
              "type": "string",
              "description": "Blog summary"
            },
            "author": {
              "$ref": "#/components/schemas/User"
            },
            "tags": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Blog tags"
            },
            "coverImage": {
              "type": "string",
              "description": "Cover image URL"
            },
            "seriesId": {
              "type": "string",
              "description": "Series ID if part of a series"
            },
            "status": {
              "type": "string",
              "enum": ["draft", "published", "private"],
              "description": "Blog status"
            },
            "mood": {
              "type": "string",
              "description": "Blog mood/tone"
            },
            "language": {
              "type": "string",
              "description": "Blog language"
            },
            "ttsUrl": {
              "type": "string",
              "description": "Text-to-speech audio URL"
            },
            "likes": {
              "type": "integer",
              "description": "Number of likes"
            },
            "bookmarks": {
              "type": "integer",
              "description": "Number of bookmarks"
            },
            "createdAt": {
              "type": "string",
              "format": "date-time",
              "description": "Creation date"
            },
            "updatedAt": {
              "type": "string",
              "format": "date-time",
              "description": "Last update date"
            }
          }
        },
        "CreateBlog": {
          "type": "object",
          "required": ["title", "content"],
          "properties": {
            "title": {
              "type": "string",
              "minLength": 1,
              "maxLength": 200,
              "description": "Blog title"
            },
            "content": {
              "type": "string",
              "minLength": 1,
              "description": "Blog content"
            },
            "summary": {
              "type": "string",
              "maxLength": 500,
              "description": "Blog summary"
            },
            "tags": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Blog tags"
            },
            "coverImage": {
              "type": "string",
              "description": "Cover image URL"
            },
            "seriesId": {
              "type": "string",
              "description": "Series ID if part of a series"
            },
            "status": {
              "type": "string",
              "enum": ["draft", "published", "private"],
              "default": "draft",
              "description": "Blog status"
            },
            "mood": {
              "type": "string",
              "description": "Blog mood/tone"
            },
            "language": {
              "type": "string",
              "default": "en",
              "description": "Blog language"
            }
          }
        },
        "UpdateBlog": {
          "type": "object",
          "properties": {
            "title": {
              "type": "string",
              "minLength": 1,
              "maxLength": 200,
              "description": "Blog title"
            },
            "content": {
              "type": "string",
              "minLength": 1,
              "description": "Blog content"
            },
            "summary": {
              "type": "string",
              "maxLength": 500,
              "description": "Blog summary"
            },
            "tags": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Blog tags"
            },
            "coverImage": {
              "type": "string",
              "description": "Cover image URL"
            },
            "status": {
              "type": "string",
              "enum": ["draft", "published", "private"],
              "description": "Blog status"
            },
            "mood": {
              "type": "string",
              "description": "Blog mood/tone"
            },
            "language": {
              "type": "string",
              "description": "Blog language"
            }
          }
        },
        "Comment": {
          "type": "object",
          "properties": {
            "_id": {
              "type": "string",
              "description": "Comment ID"
            },
            "blogId": {
              "type": "string",
              "description": "Blog ID"
            },
            "userId": {
              "$ref": "#/components/schemas/User"
            },
            "content": {
              "type": "string",
              "description": "Comment content"
            },
            "parentId": {
              "type": "string",
              "description": "Parent comment ID for replies"
            },
            "inlineRef": {
              "type": "string",
              "description": "Inline comment reference"
            },
            "position": {
              "type": "object",
              "properties": {
                "start": {
                  "type": "integer",
                  "description": "Start position in content"
                },
                "end": {
                  "type": "integer",
                  "description": "End position in content"
                }
              }
            },
            "status": {
              "type": "string",
              "enum": ["active", "deleted", "reported", "hidden"],
              "description": "Comment status"
            },
            "likes": {
              "type": "integer",
              "description": "Number of likes"
            },
            "depth": {
              "type": "integer",
              "description": "Comment thread depth"
            },
            "createdAt": {
              "type": "string",
              "format": "date-time",
              "description": "Creation date"
            },
            "updatedAt": {
              "type": "string",
              "format": "date-time",
              "description": "Last update date"
            }
          }
        },
        "CreateComment": {
          "type": "object",
          "required": ["content"],
          "properties": {
            "content": {
              "type": "string",
              "minLength": 1,
              "maxLength": 1000,
              "description": "Comment content"
            },
            "inlineRef": {
              "type": "string",
              "description": "Inline comment reference"
            },
            "position": {
              "type": "object",
              "properties": {
                "start": {
                  "type": "integer",
                  "description": "Start position in content"
                },
                "end": {
                  "type": "integer",
                  "description": "End position in content"
                }
              }
            }
          }
        },
        "UpdateComment": {
          "type": "object",
          "required": ["content"],
          "properties": {
            "content": {
              "type": "string",
              "minLength": 1,
              "maxLength": 1000,
              "description": "Comment content"
            }
          }
        },
        "ReportComment": {
          "type": "object",
          "properties": {
            "reason": {
              "type": "string",
              "description": "Reason for reporting"
            }
          }
        },
        "Series": {
          "type": "object",
          "properties": {
            "_id": {
              "type": "string",
              "description": "Series ID"
            },
            "title": {
              "type": "string",
              "description": "Series title"
            },
            "description": {
              "type": "string",
              "description": "Series description"
            },
            "summary": {
              "type": "string",
              "description": "Series summary"
            },
            "coverImage": {
              "type": "string",
              "description": "Cover image URL"
            },
            "authorId": {
              "$ref": "#/components/schemas/User"
            },
            "category": {
              "type": "string",
              "description": "Series category"
            },
            "tags": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Series tags"
            },
            "status": {
              "type": "string",
              "enum": ["draft", "active", "completed", "archived", "suspended"],
              "description": "Series status"
            },
            "visibility": {
              "type": "string",
              "enum": ["public", "private", "premium", "subscriber_only"],
              "description": "Series visibility"
            },
            "episodes": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Episode"
              },
              "description": "Series episodes"
            },
            "createdAt": {
              "type": "string",
              "format": "date-time",
              "description": "Creation date"
            },
            "updatedAt": {
              "type": "string",
              "format": "date-time",
              "description": "Last update date"
            }
          }
        },
        "CreateSeries": {
          "type": "object",
          "required": ["title", "description", "category"],
          "properties": {
            "title": {
              "type": "string",
              "minLength": 1,
              "maxLength": 200,
              "description": "Series title"
            },
            "description": {
              "type": "string",
              "minLength": 1,
              "description": "Series description"
            },
            "summary": {
              "type": "string",
              "description": "Series summary"
            },
            "coverImage": {
              "type": "string",
              "description": "Cover image URL"
            },
            "category": {
              "type": "string",
              "description": "Series category"
            },
            "tags": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Series tags"
            },
            "status": {
              "type": "string",
              "enum": ["draft", "active", "completed", "archived", "suspended"],
              "default": "draft",
              "description": "Series status"
            },
            "visibility": {
              "type": "string",
              "enum": ["public", "private", "premium", "subscriber_only"],
              "default": "public",
              "description": "Series visibility"
            }
          }
        },
        "UpdateSeries": {
          "type": "object",
          "properties": {
            "title": {
              "type": "string",
              "minLength": 1,
              "maxLength": 200,
              "description": "Series title"
            },
            "description": {
              "type": "string",
              "minLength": 1,
              "description": "Series description"
            },
            "summary": {
              "type": "string",
              "description": "Series summary"
            },
            "coverImage": {
              "type": "string",
              "description": "Cover image URL"
            },
            "category": {
              "type": "string",
              "description": "Series category"
            },
            "tags": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Series tags"
            },
            "status": {
              "type": "string",
              "enum": ["draft", "active", "completed", "archived", "suspended"],
              "description": "Series status"
            },
            "visibility": {
              "type": "string",
              "enum": ["public", "private", "premium", "subscriber_only"],
              "description": "Series visibility"
            }
          }
        },
        "Episode": {
          "type": "object",
          "properties": {
            "_id": {
              "type": "string",
              "description": "Episode ID"
            },
            "title": {
              "type": "string",
              "description": "Episode title"
            },
            "content": {
              "type": "string",
              "description": "Episode content"
            },
            "summary": {
              "type": "string",
              "description": "Episode summary"
            },
            "order": {
              "type": "integer",
              "description": "Episode order in series"
            },
            "status": {
              "type": "string",
              "enum": ["draft", "published", "private"],
              "description": "Episode status"
            },
            "createdAt": {
              "type": "string",
              "format": "date-time",
              "description": "Creation date"
            },
            "updatedAt": {
              "type": "string",
              "format": "date-time",
              "description": "Last update date"
            }
          }
        },
        "CreateEpisode": {
          "type": "object",
          "required": ["title", "content"],
          "properties": {
            "title": {
              "type": "string",
              "minLength": 1,
              "maxLength": 200,
              "description": "Episode title"
            },
            "content": {
              "type": "string",
              "minLength": 1,
              "description": "Episode content"
            },
            "summary": {
              "type": "string",
              "description": "Episode summary"
            },
            "order": {
              "type": "integer",
              "description": "Episode order in series"
            },
            "status": {
              "type": "string",
              "enum": ["draft", "published", "private"],
              "default": "draft",
              "description": "Episode status"
            }
          }
        },
        "Badge": {
          "type": "object",
          "properties": {
            "_id": {
              "type": "string",
              "description": "Badge ID"
            },
            "badgeKey": {
              "type": "string",
              "description": "Unique badge key"
            },
            "name": {
              "type": "string",
              "description": "Badge name"
            },
            "description": {
              "type": "string",
              "description": "Badge description"
            },
            "longDescription": {
              "type": "string",
              "description": "Detailed badge description"
            },
            "icon": {
              "type": "string",
              "description": "Badge icon URL"
            },
            "color": {
              "type": "string",
              "description": "Badge color"
            },
            "rarity": {
              "type": "string",
              "enum": ["common", "uncommon", "rare", "epic", "legendary", "mythic"],
              "description": "Badge rarity"
            },
            "category": {
              "type": "string",
              "enum": ["engagement", "content", "social", "achievement", "special", "seasonal", "community", "expertise"],
              "description": "Badge category"
            },
            "requirements": {
              "type": "object",
              "properties": {
                "xpRequired": {
                  "type": "integer",
                  "description": "Required XP"
                },
                "blogsRequired": {
                  "type": "integer",
                  "description": "Required number of blogs"
                },
                "followersRequired": {
                  "type": "integer",
                  "description": "Required number of followers"
                }
              }
            },
            "isActive": {
              "type": "boolean",
              "description": "Badge availability status"
            },
            "createdAt": {
              "type": "string",
              "format": "date-time",
              "description": "Creation date"
            }
          }
        },
        "BadgeClaim": {
          "type": "object",
          "properties": {
            "_id": {
              "type": "string",
              "description": "Claim ID"
            },
            "badgeId": {
              "$ref": "#/components/schemas/Badge"
            },
            "userId": {
              "$ref": "#/components/schemas/User"
            },
            "status": {
              "type": "string",
              "enum": ["pending", "approved", "rejected"],
              "description": "Claim status"
            },
            "claimedAt": {
              "type": "string",
              "format": "date-time",
              "description": "Claim date"
            },
            "reviewedAt": {
              "type": "string",
              "format": "date-time",
              "description": "Review date"
            },
            "reviewedBy": {
              "$ref": "#/components/schemas/User"
            }
          }
        },
        "Notification": {
          "type": "object",
          "properties": {
            "_id": {
              "type": "string",
              "description": "Notification ID"
            },
            "userId": {
              "type": "string",
              "description": "User ID"
            },
            "type": {
              "type": "string",
              "enum": ["like", "comment", "follow", "badge", "system", "mention"],
              "description": "Notification type"
            },
            "title": {
              "type": "string",
              "description": "Notification title"
            },
            "message": {
              "type": "string",
              "description": "Notification message"
            },
            "data": {
              "type": "object",
              "description": "Additional notification data"
            },
            "isRead": {
              "type": "boolean",
              "description": "Read status"
            },
            "createdAt": {
              "type": "string",
              "format": "date-time",
              "description": "Creation date"
            }
          }
        },
        "AbuseReport": {
          "type": "object",
          "properties": {
            "_id": {
              "type": "string",
              "description": "Report ID"
            },
            "reporterId": {
              "$ref": "#/components/schemas/User"
            },
            "targetType": {
              "type": "string",
              "enum": ["blog", "comment", "user", "series"],
              "description": "Type of reported content"
            },
            "targetId": {
              "type": "string",
              "description": "ID of reported content"
            },
            "category": {
              "type": "string",
              "description": "Report category"
            },
            "reason": {
              "type": "string",
              "description": "Detailed reason"
            },
            "status": {
              "type": "string",
              "enum": ["pending", "under_review", "resolved", "dismissed"],
              "description": "Report status"
            },
            "priority": {
              "type": "string",
              "enum": ["low", "medium", "high", "urgent"],
              "description": "Report priority"
            },
            "createdAt": {
              "type": "string",
              "format": "date-time",
              "description": "Report creation date"
            },
            "updatedAt": {
              "type": "string",
              "format": "date-time",
              "description": "Last update date"
            }
          }
        },
        "CreateAbuseReport": {
          "type": "object",
          "required": ["targetType", "targetId", "category", "reason"],
          "properties": {
            "targetType": {
              "type": "string",
              "enum": ["blog", "comment", "user", "series"],
              "description": "Type of reported content"
            },
            "targetId": {
              "type": "string",
              "description": "ID of reported content"
            },
            "category": {
              "type": "string",
              "description": "Report category"
            },
            "reason": {
              "type": "string",
              "minLength": 10,
              "maxLength": 1000,
              "description": "Detailed reason for report"
            },
            "evidence": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Evidence URLs or screenshots"
            }
          }
        },
        "UserXP": {
          "type": "object",
          "properties": {
            "userId": {
              "type": "string",
              "description": "User ID"
            },
            "xp": {
              "type": "integer",
              "description": "Current XP"
            },
            "level": {
              "type": "integer",
              "description": "Current level"
            },
            "xpToNextLevel": {
              "type": "integer",
              "description": "XP needed for next level"
            },
            "totalXP": {
              "type": "integer",
              "description": "Total XP earned"
            },
            "rank": {
              "type": "integer",
              "description": "Global rank"
            }
          }
        },
        "XPTransaction": {
          "type": "object",
          "properties": {
            "_id": {
              "type": "string",
              "description": "Transaction ID"
            },
            "userId": {
              "type": "string",
              "description": "User ID"
            },
            "amount": {
              "type": "integer",
              "description": "XP amount"
            },
            "type": {
              "type": "string",
              "enum": ["earned", "spent", "bonus", "penalty"],
              "description": "Transaction type"
            },
            "reason": {
              "type": "string",
              "description": "Reason for XP change"
            },
            "source": {
              "type": "string",
              "enum": ["blog_creation", "blog_publishing", "comment", "like", "follow", "badge", "admin"],
              "description": "XP source"
            },
            "sourceId": {
              "type": "string",
              "description": "Source object ID"
            },
            "createdAt": {
              "type": "string",
              "format": "date-time",
              "description": "Transaction date"
            }
          }
        },
        "LeaderboardEntry": {
          "type": "object",
          "properties": {
            "rank": {
              "type": "integer",
              "description": "Leaderboard rank"
            },
            "user": {
              "$ref": "#/components/schemas/User"
            },
            "score": {
              "type": "integer",
              "description": "Leaderboard score"
            },
            "metric": {
              "type": "string",
              "description": "Metric type (xp, followers, etc.)"
            }
          }
        },
        "AuthResponse": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean",
              "description": "Operation success status"
            },
            "token": {
              "type": "string",
              "description": "JWT access token"
            },
            "refreshToken": {
              "type": "string",
              "description": "JWT refresh token"
            },
            "user": {
              "$ref": "#/components/schemas/User"
            },
            "message": {
              "type": "string",
              "description": "Response message"
            }
          }
        },
        "SuccessResponse": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean",
              "description": "Operation success status"
            },
            "message": {
              "type": "string",
              "description": "Response message"
            },
            "data": {
              "type": "object",
              "description": "Response data"
            }
          }
        },
        "Error": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean",
              "description": "Operation success status"
            },
            "message": {
              "type": "string",
              "description": "Error message"
            },
            "error": {
              "type": "string",
              "description": "Error type"
            },
            "statusCode": {
              "type": "integer",
              "description": "HTTP status code"
            }
          }
        },
        "Pagination": {
          "type": "object",
          "properties": {
            "page": {
              "type": "integer",
              "description": "Current page number"
            },
            "limit": {
              "type": "integer",
              "description": "Items per page"
            },
            "total": {
              "type": "integer",
              "description": "Total number of items"
            },
            "pages": {
              "type": "integer",
              "description": "Total number of pages"
            },
            "hasNext": {
              "type": "boolean",
              "description": "Has next page"
            },
            "hasPrev": {
              "type": "boolean",
              "description": "Has previous page"
            }
          }
        }
      }
    }
}
